// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Admin
  Unit
  Staff
  User
}

enum collaborateType {
  MoU
  MoA
  IA
}

enum headingType {
  Kerjasama
}

enum statusType {
  Aktif
  NonAktif
  InProcess
}

enum chartype {
  Baru
  Perpanjang
}

enum agreements {
  Agree
  Disagree
}

enum notif {
  False
  True
}

enum scope {
  Internasional
  Domestik
}

enum category {
  Akademik
  Pemerintah
  Industri
  Organisasi
}

model User {
  id           String         @id @default(cuid())
  role         UserRole       @default(User)
  name         String
  position     String
  agency       String
  email        String         @unique
  password     String
  profileUrl   String         @default("https://tl.vhv.rs/dpng/s/541-5413387_log-in-sign-up-micro-environment-diagram-hd.png")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  repositories Repository[]
  Notification Notification[]
}

model Repository {
  id                   Int             @id @default(autoincrement())
  name_of_the_proposer String
  position             String
  partner_agencies     String
  scope                scope           @default(Internasional)
  country              String
  agency_category      category        @default(Akademik)
  type                 collaborateType @default(MoU)
  comment              String?
  end_date             String?
  upload_file          String
  status               statusType      @default(Aktif)
  agreement            agreements      @default(Agree)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  user                 User            @relation(fields: [userId], references: [id])
  userId               String
}

model Extension {
  id                   Int             @id @default(autoincrement())
  name_of_the_proposer String
  position             String
  partner_agencies     String
  scope                scope           @default(Domestik)
  country              String
  agency_category      category        @default(Akademik)
  type                 collaborateType @default(MoU)
  document_number      String
  start                String
  end                  String
  comment              String?
  upload_file          String
  status               statusType      @default(NonAktif)
  agreement            agreements      @default(Agree)
}

model Notification {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  notificationDate DateTime @default(now())
  readStatus       notif    @default(False)
  category         String
  end_date         String
  schedule         DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  userId           String
}

model Template {
  id          Int    @id @default(autoincrement())
  upload_file String
}

model Addendum {
  id                   Int             @id @default(autoincrement())
  name_of_the_proposer String
  position             String
  partner_agencies     String
  scope                scope           @default(Domestik)
  country              String
  agency_category      category        @default(Akademik)
  type                 collaborateType @default(MoU)
  document_number      String
  start                String
  end                  String
  comment              String?
  upload_file          String
  status               statusType      @default(NonAktif)
  agreement            agreements      @default(Agree)
}

model Statistic {
  id              Int             @id @default(autoincrement())
  collaborateType collaborateType
  count           Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}
